//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FisioAPI.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MOSSAEntities : DbContext
    {
        public MOSSAEntities()
            : base("name=MOSSAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Citas> Citas { get; set; }
        public virtual DbSet<Comentarios> Comentarios { get; set; }
        public virtual DbSet<Doctores> Doctores { get; set; }
        public virtual DbSet<Planilla> Planilla { get; set; }
        public virtual DbSet<TBITACORA> TBITACORA { get; set; }
        public virtual DbSet<TipoPersona> TipoPersona { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual ObjectResult<Consultar_Datos_Usuario_Result> Consultar_Datos_Usuario(string email, string contrasenna)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contrasennaParameter = contrasenna != null ?
                new ObjectParameter("Contrasenna", contrasenna) :
                new ObjectParameter("Contrasenna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Consultar_Datos_Usuario_Result>("Consultar_Datos_Usuario", emailParameter, contrasennaParameter);
        }
    
        public virtual ObjectResult<Consultar_IdPlanilla_Result> Consultar_IdPlanilla(Nullable<int> idPlanilla)
        {
            var idPlanillaParameter = idPlanilla.HasValue ?
                new ObjectParameter("IdPlanilla", idPlanilla) :
                new ObjectParameter("IdPlanilla", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Consultar_IdPlanilla_Result>("Consultar_IdPlanilla", idPlanillaParameter);
        }
    
        public virtual ObjectResult<Consultar_Planilla_Doctor_Result> Consultar_Planilla_Doctor(Nullable<int> idDoctor)
        {
            var idDoctorParameter = idDoctor.HasValue ?
                new ObjectParameter("IdDoctor", idDoctor) :
                new ObjectParameter("IdDoctor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Consultar_Planilla_Doctor_Result>("Consultar_Planilla_Doctor", idDoctorParameter);
        }
    
        public virtual ObjectResult<Consultar_Usuarios_Estado_Result> Consultar_Usuarios_Estado(Nullable<int> indicador)
        {
            var indicadorParameter = indicador.HasValue ?
                new ObjectParameter("indicador", indicador) :
                new ObjectParameter("indicador", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Consultar_Usuarios_Estado_Result>("Consultar_Usuarios_Estado", indicadorParameter);
        }
    
        public virtual int Editar_Datos_Planilla(Nullable<int> idPlanilla, Nullable<int> idDoctor, Nullable<int> horasT, Nullable<decimal> salBrut, Nullable<decimal> seguro, Nullable<decimal> deducc, Nullable<decimal> extra, Nullable<decimal> salNet)
        {
            var idPlanillaParameter = idPlanilla.HasValue ?
                new ObjectParameter("IdPlanilla", idPlanilla) :
                new ObjectParameter("IdPlanilla", typeof(int));
    
            var idDoctorParameter = idDoctor.HasValue ?
                new ObjectParameter("IdDoctor", idDoctor) :
                new ObjectParameter("IdDoctor", typeof(int));
    
            var horasTParameter = horasT.HasValue ?
                new ObjectParameter("HorasT", horasT) :
                new ObjectParameter("HorasT", typeof(int));
    
            var salBrutParameter = salBrut.HasValue ?
                new ObjectParameter("SalBrut", salBrut) :
                new ObjectParameter("SalBrut", typeof(decimal));
    
            var seguroParameter = seguro.HasValue ?
                new ObjectParameter("Seguro", seguro) :
                new ObjectParameter("Seguro", typeof(decimal));
    
            var deduccParameter = deducc.HasValue ?
                new ObjectParameter("Deducc", deducc) :
                new ObjectParameter("Deducc", typeof(decimal));
    
            var extraParameter = extra.HasValue ?
                new ObjectParameter("Extra", extra) :
                new ObjectParameter("Extra", typeof(decimal));
    
            var salNetParameter = salNet.HasValue ?
                new ObjectParameter("SalNet", salNet) :
                new ObjectParameter("SalNet", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Editar_Datos_Planilla", idPlanillaParameter, idDoctorParameter, horasTParameter, salBrutParameter, seguroParameter, deduccParameter, extraParameter, salNetParameter);
        }
    
        public virtual int Editar_Datos_Usuario(string nombre, string apellido1, string apellido2, string cedula, Nullable<int> telefono, string email, string genero, Nullable<int> edad, string contrasenna, Nullable<int> tipoUsuario, Nullable<bool> state, Nullable<int> iDusuario)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("Apellido1", apellido1) :
                new ObjectParameter("Apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("Apellido2", apellido2) :
                new ObjectParameter("Apellido2", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var generoParameter = genero != null ?
                new ObjectParameter("Genero", genero) :
                new ObjectParameter("Genero", typeof(string));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("Edad", edad) :
                new ObjectParameter("Edad", typeof(int));
    
            var contrasennaParameter = contrasenna != null ?
                new ObjectParameter("Contrasenna", contrasenna) :
                new ObjectParameter("Contrasenna", typeof(string));
    
            var tipoUsuarioParameter = tipoUsuario.HasValue ?
                new ObjectParameter("TipoUsuario", tipoUsuario) :
                new ObjectParameter("TipoUsuario", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(bool));
    
            var iDusuarioParameter = iDusuario.HasValue ?
                new ObjectParameter("IDusuario", iDusuario) :
                new ObjectParameter("IDusuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Editar_Datos_Usuario", nombreParameter, apellido1Parameter, apellido2Parameter, cedulaParameter, telefonoParameter, emailParameter, generoParameter, edadParameter, contrasennaParameter, tipoUsuarioParameter, stateParameter, iDusuarioParameter);
        }
    
        public virtual int Registrar_Bitacora(string email, Nullable<System.DateTime> fechaHora, Nullable<int> codigoError, string descripcion, string origen)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fechaHoraParameter = fechaHora.HasValue ?
                new ObjectParameter("FechaHora", fechaHora) :
                new ObjectParameter("FechaHora", typeof(System.DateTime));
    
            var codigoErrorParameter = codigoError.HasValue ?
                new ObjectParameter("CodigoError", codigoError) :
                new ObjectParameter("CodigoError", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var origenParameter = origen != null ?
                new ObjectParameter("Origen", origen) :
                new ObjectParameter("Origen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Registrar_Bitacora", emailParameter, fechaHoraParameter, codigoErrorParameter, descripcionParameter, origenParameter);
        }
    
        public virtual int Registrar_Datos_Usuario(string nombre, string apellido1, string apellido2, string cedula, Nullable<int> telefono, string email, string genero, Nullable<int> edad, string contrasenna, Nullable<int> tipoUsuario)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("Apellido1", apellido1) :
                new ObjectParameter("Apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("Apellido2", apellido2) :
                new ObjectParameter("Apellido2", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var generoParameter = genero != null ?
                new ObjectParameter("Genero", genero) :
                new ObjectParameter("Genero", typeof(string));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("Edad", edad) :
                new ObjectParameter("Edad", typeof(int));
    
            var contrasennaParameter = contrasenna != null ?
                new ObjectParameter("Contrasenna", contrasenna) :
                new ObjectParameter("Contrasenna", typeof(string));
    
            var tipoUsuarioParameter = tipoUsuario.HasValue ?
                new ObjectParameter("TipoUsuario", tipoUsuario) :
                new ObjectParameter("TipoUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Registrar_Datos_Usuario", nombreParameter, apellido1Parameter, apellido2Parameter, cedulaParameter, telefonoParameter, emailParameter, generoParameter, edadParameter, contrasennaParameter, tipoUsuarioParameter);
        }
    
        public virtual int Registrar_Planilla(Nullable<int> idDoctor, Nullable<int> horasT, Nullable<decimal> salBrut, Nullable<decimal> seguro, Nullable<decimal> deducc, Nullable<decimal> extra, Nullable<decimal> salNet)
        {
            var idDoctorParameter = idDoctor.HasValue ?
                new ObjectParameter("IdDoctor", idDoctor) :
                new ObjectParameter("IdDoctor", typeof(int));
    
            var horasTParameter = horasT.HasValue ?
                new ObjectParameter("HorasT", horasT) :
                new ObjectParameter("HorasT", typeof(int));
    
            var salBrutParameter = salBrut.HasValue ?
                new ObjectParameter("SalBrut", salBrut) :
                new ObjectParameter("SalBrut", typeof(decimal));
    
            var seguroParameter = seguro.HasValue ?
                new ObjectParameter("Seguro", seguro) :
                new ObjectParameter("Seguro", typeof(decimal));
    
            var deduccParameter = deducc.HasValue ?
                new ObjectParameter("Deducc", deducc) :
                new ObjectParameter("Deducc", typeof(decimal));
    
            var extraParameter = extra.HasValue ?
                new ObjectParameter("Extra", extra) :
                new ObjectParameter("Extra", typeof(decimal));
    
            var salNetParameter = salNet.HasValue ?
                new ObjectParameter("SalNet", salNet) :
                new ObjectParameter("SalNet", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Registrar_Planilla", idDoctorParameter, horasTParameter, salBrutParameter, seguroParameter, deduccParameter, extraParameter, salNetParameter);
        }
    }
}
